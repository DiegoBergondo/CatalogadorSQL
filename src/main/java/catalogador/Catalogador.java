package catalogador;

import BibliotecaRIGU.JExtensibleDialog;
import BibliotecaRIGU.JDialogFactory;
import BibliotecaRIGU.JSimpleDialog;
import BibliotecaRIGU.JTabDialog;
import BibliotecaRIGU.JTreeViewDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.ListSelectionModel;


/**
 *
 * @author DiegoBergondo
 */
public class Catalogador extends javax.swing.JFrame implements ActionListener, ChangeListener, TreeSelectionListener, ListSelectionListener {

    private JSimpleDialog JSDSeleccion, JSDSeleccion2, JSDDatosArticulo, JSDDatosArticulo2, JSDDatosCV, JSDBuscador, JSDComparador, JSDComparados;
    private JTabDialog JTDDatosArticulo, JTDDatosArticulo2, JTDComparador;
    private JTreeViewDialog JTVarbolPrincipal = (JTreeViewDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.TREE, "Catalogador");
    private boolean comparador = false, esSQL = false;
    private BBDD baseDatos = new BBDD();
    private int tipo, Id;
    private DatosArticulo articuloDefault = new DatosArticulo();

    /**
     * Catalogador
     */
    public Catalogador() throws SQLException {       
        initComponents();        
        botonInicio.addActionListener(this);
        this.getContentPane().add(pantallaInicio1, java.awt.BorderLayout.CENTER);
        this.getContentPane().add(botonInicio, java.awt.BorderLayout.SOUTH);        
        this.setMinimumSize(new Dimension (870, 640));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pantallaPresentacion1 = new catalogador.pantallaPresentacion();
        pantallaSeleccionImagen = new catalogador.pantallaSeleccionImagen();
        pantallaInicio1 = new catalogador.pantallaInicio();
        botonesPrincipales1 = new catalogador.botonesPrincipales();
        pantallaSeleccion1 = new catalogador.pantallaSeleccion();
        pantallaSeleccionA1 = new catalogador.pantallaSeleccionA();
        pantallaSeleccionB1 = new catalogador.pantallaSeleccionB();
        pantallaDescripcion1 = new catalogador.pantallaDescripcion();
        pantallaDescripcion21 = new catalogador.pantallaDescripcion2();
        pantallaDescripcion31 = new catalogador.pantallaDescripcion3();
        pantallaVenta1 = new catalogador.pantallaVenta();
        pantallaBuscador1 = new catalogador.pantallaBuscador();
        pantallaComparador1 = new catalogador.pantallaComparador();
        pantallaComparador2 = new catalogador.pantallaComparador();
        pantallaComparador3 = new catalogador.pantallaComparador();
        pantallaComparador4 = new catalogador.pantallaComparador();
        botonInicio = new catalogador.BotonInicio();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Catalogador().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Catalogador.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    catalogador.BotonInicio botonInicio;
    catalogador.botonesPrincipales botonesPrincipales1;
    catalogador.pantallaBuscador pantallaBuscador1;
    catalogador.pantallaComparador pantallaComparador1;
    catalogador.pantallaComparador pantallaComparador2;
    catalogador.pantallaComparador pantallaComparador3;
    catalogador.pantallaComparador pantallaComparador4;
    catalogador.pantallaDescripcion pantallaDescripcion1;
    catalogador.pantallaDescripcion2 pantallaDescripcion21;
    catalogador.pantallaDescripcion3 pantallaDescripcion31;
    catalogador.pantallaInicio pantallaInicio1;
    catalogador.pantallaPresentacion pantallaPresentacion1;
    catalogador.pantallaSeleccion pantallaSeleccion1;
    catalogador.pantallaSeleccionA pantallaSeleccionA1;
    catalogador.pantallaSeleccionB pantallaSeleccionB1;
    catalogador.pantallaSeleccionImagen pantallaSeleccionImagen;
    catalogador.pantallaVenta pantallaVenta1;
    // End of variables declaration//GEN-END:variables

    /**
     * Guarda o modifica los datos de un artículo.
     * @param mod boolean que indica si es artículo nuevo o modificación.
     */
    public void GuardarDatosArticulo(boolean mod){
        DatosArticulo articulo = new DatosArticulo();    
        articulo.setId(Id);
        articulo.setAutor(pantallaDescripcion1.getAutor().getText());
        articulo.setTitulo(pantallaDescripcion1.getTitulo().getText());
        articulo.setFormato(pantallaDescripcion1.getFormato().getText());
        articulo.setQuiero(pantallaDescripcion1.getQuiero());
        articulo.setTengo(pantallaDescripcion1.getTengo());
        articulo.setVenta(pantallaDescripcion1.getVenta());
        articulo.setComentario(pantallaDescripcion1.getDescripcion().getText());
        articulo.setExDueño(pantallaDescripcion21.getAntDueno().getText());
        articulo.setFPago(pantallaDescripcion21.getFPago().getText());
        articulo.setEstado(pantallaDescripcion21.getEstado().getSelectedItem().toString());
        if(!pantallaDescripcion21.getPrecio().getText().equalsIgnoreCase("Precio"))
            articulo.setPrecio(Integer.parseInt(pantallaDescripcion21.getPrecio().getText()));
        else
            articulo.setPrecio(0);
        articulo.setTipo(this.tipo);
        articulo.setFCreacion(Integer.parseInt(pantallaDescripcion1.getFechaDia().getSelectedItem().toString()),
                pantallaDescripcion1.getFechaMes().getSelectedIndex(), 
                Integer.parseInt(pantallaDescripcion1.getFechaAno().getValue().toString()));
        articulo.setFCompra(Integer.parseInt(pantallaDescripcion21.getFechaDia().getSelectedItem().toString()),
                pantallaDescripcion21.getFechaMes().getSelectedIndex(), 
                Integer.parseInt(pantallaDescripcion21.getFechaAno().getValue().toString()));
        articulo.setImagen(pantallaSeleccionImagen.getImage());
        articulo.setDireccionImagen(pantallaSeleccionImagen.getDireccionImage());
        pantallaDescripcion1.setImagen(articulo.getImagen());
        articulo.setLugarVenta(pantallaVenta1.getLugarVenta().getSelectedItem().toString());
        articulo.setTipoVenta(pantallaVenta1.getTipoVenta().getSelectedItem().toString());
        if(!pantallaVenta1.getPrecioInicial().getText().equalsIgnoreCase("Precio inicial venta"))
           articulo.setPrecioVentaInicial(Integer.parseInt(pantallaVenta1.getPrecioInicial().getText()));
        else
           articulo.setPrecioVentaInicial(0);            
        if(!pantallaVenta1.getPrecioFinal().getText().equalsIgnoreCase("Precio final venta"))
            articulo.setPrecioVentaFinal(Integer.parseInt(pantallaVenta1.getPrecioFinal().getText()));
        else
           articulo.setPrecioVentaFinal(0);        
        articulo.setEnlace(pantallaVenta1.getEnlace().getText());
            articulo.setFPVenta(Integer.parseInt(pantallaVenta1.getFechaDiaPV().getSelectedItem().toString()),
        pantallaVenta1.getFechaMesPV().getSelectedIndex(), 
            Integer.parseInt(pantallaVenta1.getFechaAnoPV().getValue().toString()));
        if(mod)
            baseDatos.modificarArticulo(articulo);            
        else
            baseDatos.addArticulo(articulo,true);
        pantallaDescripcion31.setMediaTengo(this.baseDatos.getMediaTengo(tipo));
        pantallaDescripcion31.setMediaQuiero(this.baseDatos.getMediaQuiero(tipo));
        pantallaDescripcion31.setMediaVenta(this.baseDatos.getEnVenta(tipo));
        pantallaVenta1.setMediaPrecioInicial(this.baseDatos.getMediaPI(tipo));
        pantallaVenta1.setMediaPrecioVenta(this.baseDatos.getMediaPF(tipo));
        pantallaVenta1.setMediaVenta(this.baseDatos.getEnVenta(tipo));
        if(esSQL){
            this.escribirSQL(articulo, mod);
        }
        else
            this.escribirFichero();
    }
    
    /**
     * Método auxiliar para crear un artículo default.
     * @param articulo
     */
    public void guardarDefault(DatosArticulo articulo){
        articulo.setAutor(pantallaDescripcion1.getAutor().getText());
        articulo.setTitulo(pantallaDescripcion1.getTitulo().getText());
        articulo.setFormato(pantallaDescripcion1.getFormato().getText());
        articulo.setQuiero(pantallaDescripcion1.getQuiero());
        articulo.setTengo(pantallaDescripcion1.getTengo());
        articulo.setVenta(pantallaDescripcion1.getVenta());
        articulo.setComentario(pantallaDescripcion1.getDescripcion().getText());
        articulo.setExDueño(pantallaDescripcion21.getAntDueno().getText());
        articulo.setFPago(pantallaDescripcion21.getFPago().getText());
        articulo.setEstado(pantallaDescripcion21.getEstado().getSelectedItem().toString());
        articulo.setFCreacion(Integer.parseInt(pantallaDescripcion1.getFechaDia().getSelectedItem().toString()),
                pantallaDescripcion1.getFechaMes().getSelectedIndex(), 
                Integer.parseInt(pantallaDescripcion1.getFechaAno().getValue().toString()));
        articulo.setFCompra(Integer.parseInt(pantallaDescripcion21.getFechaDia().getSelectedItem().toString()),
                pantallaDescripcion21.getFechaMes().getSelectedIndex(), 
                Integer.parseInt(pantallaDescripcion21.getFechaAno().getValue().toString()));
        if(!pantallaSeleccionImagen.hayImagen()){
            articulo.setImagen(pantallaSeleccionImagen.getImage());
            articulo.setDireccionImagen(pantallaSeleccionImagen.getDireccionImage());
        }
        articulo.setLugarVenta(pantallaVenta1.getLugarVenta().getSelectedItem().toString());
        articulo.setTipoVenta(pantallaVenta1.getTipoVenta().getSelectedItem().toString());
        articulo.setFPVenta(Integer.parseInt(pantallaVenta1.getFechaDiaPV().getSelectedItem().toString()),
            pantallaVenta1.getFechaMesPV().getSelectedIndex(), 
            Integer.parseInt(pantallaVenta1.getFechaAnoPV().getValue().toString()));         
        articulo.setEnlace(pantallaVenta1.getEnlace().getText());
    }
    
    /**
     * Asigna a pantalla los datos del artículo que entra por parámetro.
     * @param articulo
     */
    public void setDatosArticulo(DatosArticulo articulo){
        pantallaDescripcion1.setAutor(articulo.getAutor());
        pantallaDescripcion1.setTitulo(articulo.getTitulo());
        pantallaDescripcion1.setFormato(articulo.getFormato());
        pantallaDescripcion1.setQuiero(articulo.getQuiero());
        pantallaDescripcion1.setTengo(articulo.getTengo());
        pantallaDescripcion1.setVenta(articulo.getVenta());
        pantallaDescripcion1.setDescripcion(articulo.getComentario());
        Calendar cal = Calendar.getInstance();
        cal.setTime(articulo.getFCreacion());
        int ano = cal.get(Calendar.YEAR);
        int mes = cal.get(Calendar.MONTH);
        int dia = cal.get(Calendar.DAY_OF_MONTH);
        pantallaDescripcion1.setFechaDia(dia);
        pantallaDescripcion1.setFechaMes(mes);
        pantallaDescripcion1.setFechaAno(ano);
        pantallaDescripcion1.setModificar(true);
        pantallaDescripcion21.setAntDueno(articulo.getExDueño());
        pantallaDescripcion21.setFPago(articulo.getFPago());
        pantallaDescripcion21.setEstado(articulo.getEstado());
        pantallaDescripcion21.setPrecio(articulo.getPrecio());
        pantallaDescripcion31.setMediaTengo(this.baseDatos.getMediaTengo(tipo));
        pantallaDescripcion31.setMediaQuiero(this.baseDatos.getMediaQuiero(tipo));
        pantallaDescripcion31.setMediaVenta(this.baseDatos.getEnVenta(tipo));
        cal.setTime(articulo.getFCompra());
        ano = cal.get(Calendar.YEAR);
        mes = cal.get(Calendar.MONTH);
        dia = cal.get(Calendar.DAY_OF_MONTH);
        pantallaDescripcion21.setFechaDia(dia);
        pantallaDescripcion21.setFechaMes(mes);
        pantallaDescripcion21.setFechaAno(ano);
        if(articulo.hayImagen()){
            pantallaDescripcion1.setImagen(articulo.getImagen());
            pantallaSeleccionImagen.setImagen(articulo.getImagen());
            pantallaSeleccionImagen.setDireccionImage(articulo.getDireccionImagen());
        }
        else{
            pantallaDescripcion1.setImagenDefault();
            pantallaSeleccionImagen.setDefault();
        }
        pantallaVenta1.setLugarVenta(articulo.getLugarVenta());
        pantallaVenta1.setTipoVenta(articulo.getTipoVenta());
        pantallaVenta1.setEnlace(articulo.getEnlace());
        pantallaVenta1.setPrecioInicial(articulo.getPrecioVentaInicial());
        pantallaVenta1.setPrecioFinal(articulo.getPrecioVentaFinal());
        cal.setTime(articulo.getFPVenta());
        ano = cal.get(Calendar.YEAR);
        mes = cal.get(Calendar.MONTH);
        dia = cal.get(Calendar.DAY_OF_MONTH);
        pantallaVenta1.setFechaDiaPV(dia);
        pantallaVenta1.setFechaMesPV(mes);
        pantallaVenta1.setFechaAnoPV(ano);
        pantallaVenta1.setMediaPrecioInicial(this.baseDatos.getMediaPI(tipo));
        pantallaVenta1.setMediaPrecioVenta(this.baseDatos.getMediaPF(tipo));
        pantallaVenta1.setMediaVenta(this.baseDatos.getEnVenta(tipo));
    }
    
    /**
     * Asigna default a pantalla en datos del artículo.
     */
    public void setDatosDefaultArticulo(){
        this.setDatosArticulo(this.articuloDefault);
        pantallaDescripcion1.setGuardar(false);
        pantallaDescripcion1.setModificar(false);
        pantallaDescripcion21.setPrecio("Precio");
        pantallaVenta1.setPrecioInicial("Precio inicial venta");
        pantallaVenta1.setPrecioFinal("Precio final venta");    
}
    
    /**
     * Asigna default a pantalla en buscador.
     */
    public void setDatosDefaultBuscador(){
        pantallaBuscador1.setImagenDefault();
        pantallaBuscador1.setTexto("Texto a buscar");
        pantallaBuscador1.setTitulo("");
        pantallaBuscador1.limpiarTabla();
    }
    
    /**
     * Crea todo el árbol principal y las GUIs que lleva en su interior.
     * @param seleccion String con el tipo seleccionado.
     */
    private void getArbol(String fuente, String seleccion) {
        JSDSeleccion = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null);
        JSDSeleccion.addExtensibleChild(pantallaSeleccionA1, "columna");
        pantallaSeleccionA1.addChangeListener(this);
        pantallaSeleccionB1.addChangeListener(this);
        pantallaDescripcion1.setContainerName("Datos articulo");
        pantallaSeleccionImagen.setContainerName("Fotografía");
        pantallaSeleccionImagen.setFuente(fuente.equals("MySQL"));
        ArrayList<JExtensibleDialog> LPantallaDescripcion = new ArrayList<>();
        ArrayList<JExtensibleDialog> LPantallaDescripcion2 = new ArrayList<>();
        ArrayList<JExtensibleDialog> LPantallaDescripcion3 = new ArrayList<>();
        LPantallaDescripcion.add(pantallaDescripcion1);
        pantallaDescripcion1.addChangeListener(this);
        LPantallaDescripcion.add(pantallaSeleccionImagen);
        LPantallaDescripcion2.add(pantallaDescripcion21);
        LPantallaDescripcion2.add(pantallaDescripcion31);
        JSDDatosCV = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null);
        JSDDatosCV.addExtensibleChildrenList(LPantallaDescripcion2, "fila");
        JSDDatosCV.setContainerName("Datos compra");
        LPantallaDescripcion3.add(JSDDatosCV);
        JTDDatosArticulo = (JTabDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.TAB, null);
        JTDDatosArticulo.addExtensibleChildrenList(LPantallaDescripcion, "Panel datos");
        JSDDatosArticulo = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null); 
        JSDDatosArticulo.addExtensibleChild(JTDDatosArticulo, "fila");
        JTDDatosArticulo2 = (JTabDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.TAB, null);
        JTDDatosArticulo2.addExtensibleChildrenList(LPantallaDescripcion3, "Panel datos CV");
        JSDDatosArticulo2 = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null); 
        JSDDatosArticulo2.addExtensibleChild(JTDDatosArticulo2, "fila");
        JSDDatosArticulo.setContainerName("Datos articulo");
        ArrayList<JExtensibleDialog> LPantallaDescripcion4 = new ArrayList<>();
        LPantallaDescripcion4.add(JSDDatosArticulo);
        JSDDatosArticulo2.setContainerName("Datos CV");
        LPantallaDescripcion4.add(JSDDatosArticulo2);
        JTDComparador = (JTabDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.TAB, null);
        JTDComparador.addExtensibleChild(pantallaComparador1, "Cuadros");
        JTDComparador.addExtensibleChild(pantallaComparador2, "Libros");
        JTDComparador.addExtensibleChild(pantallaComparador3, "Musica");
        JTDComparador.addExtensibleChild(pantallaComparador4, "Videojuegos");
        JTVarbolPrincipal.iniciarTree("Catalogador");
        JTVarbolPrincipal.addExtensibleChild(pantallaPresentacion1, "Presentacion");
        JTVarbolPrincipal.addExtensibleChild(JSDSeleccion, "Tipo de coleccion");
        JTVarbolPrincipal.addExtensibleChildrenList(LPantallaDescripcion4, "Datos del articulo");
        JSDBuscador = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null);
        pantallaBuscador1.addChangeListener(this);
        JSDBuscador.addExtensibleChild(pantallaBuscador1, "columna");
        JTVarbolPrincipal.addExtensibleChild(JSDBuscador, "Buscador");
        ArrayList<JExtensibleDialog> LPantallaComparador = new ArrayList<>();
        LPantallaComparador.add(JTDComparador);
        pantallaComparador1.addChangeListener(this);
        pantallaComparador2.addChangeListener(this);
        pantallaComparador3.addChangeListener(this);
        pantallaComparador4.addChangeListener(this);
        JSDComparados = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null);
        LPantallaComparador.add(JSDComparados);
        JSDComparador = (JSimpleDialog) JDialogFactory.createDialog(JExtensibleDialog.cont_type.SIMPLE, null);
        JSDComparador.addExtensibleChildrenList(LPantallaComparador, "columna");
        JTVarbolPrincipal.addTreeChangeListener(this);
        this.pantallaBuscador1.addListSelectionListener(this);
        this.setTitle(JTVarbolPrincipal.containerName());
        this.getContentPane().remove(pantallaSeleccion1);
        this.getContentPane().add(JTVarbolPrincipal, java.awt.BorderLayout.CENTER);
        seleccionCambio(seleccion);
        if("MySQL".equals(fuente)){
            esSQL = true;
            this.leerSQL();
        }
        else{
            try {
                this.leerFichero();
            } catch (IOException ex) {
                Logger.getLogger(Catalogador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
   
    
    /**
     * Permite el cambio de tipo en el catalogador.
     * @param articulo
     */
    private void seleccionCambio(String tipo){
        if(tipo.equalsIgnoreCase("cuadros"))
            this.cambioaCuadros();
        else if(tipo.equalsIgnoreCase("libros"))
            this.cambioaLibros();
        else if(tipo.equalsIgnoreCase("música"))
            this.cambioaMusica();
        else if(tipo.equalsIgnoreCase("videojuegos"))
            this.cambioaVideojuegos();
        this.setDatosDefaultArticulo();
        this.pantallaSeleccionA1.setTipo(this.tipo);
        this.pantallaSeleccionB1.setTipo(this.tipo);
    }

    /**
     * Cambia el tipo a cuadros.
     */    
    private void cambioaCuadros(){
        this.pantallaDescripcion1.setAutor("Nombre del pintor");
        this.pantallaDescripcion1.setTitulo("Titulo del cuadro");
        this.pantallaDescripcion31.setTitulo1("Precio medio cuadros que tengo");
        this.pantallaDescripcion31.setTitulo2("Precio medio cuadros que quiero");
        this.pantallaDescripcion31.setTitulo3("Cantidad de cuadros a la venta");
        this.pantallaVenta1.setTitulo1("Precio medio de venta de cuadros inicial");
        this.pantallaVenta1.setTitulo2("Precio medio de venta de cuadros final");
        this.pantallaVenta1.setTitulo3("Cantidad de cuadros a la venta");
        this.tipo=0;
        this.pantallaPresentacion1.setImage(tipo);
        this.guardarDefault(this.articuloDefault);
    }

    /**
     * Cambia el tipo a libros.
     */ 
    private void cambioaLibros(){
        this.pantallaDescripcion1.setAutor("Nombre del escritor");
        this.pantallaDescripcion1.setTitulo("Titulo del libro");
        this.pantallaDescripcion31.setTitulo1("Precio medio libros que tengo");
        this.pantallaDescripcion31.setTitulo2("Precio medio libros que quiero");
        this.pantallaDescripcion31.setTitulo3("Cantidad de libros a la venta");
        this.pantallaVenta1.setTitulo1("Precio medio de venta de libros inicial");
        this.pantallaVenta1.setTitulo2("Precio medio de venta de libros final");
        this.pantallaVenta1.setTitulo3("Cantidad de libros a la venta");
        this.tipo=1;
        this.pantallaPresentacion1.setImage(tipo);
        this.guardarDefault(this.articuloDefault);
    }

    /**
     * Cambia el tipo a musica.
     */ 
    private void cambioaMusica(){
        this.pantallaDescripcion1.setAutor("Nombre del cantante");
        this.pantallaDescripcion1.setTitulo("Titulo del disco o cinta");
        this.pantallaDescripcion31.setTitulo1("Precio medio discos o cintas que tengo");
        this.pantallaDescripcion31.setTitulo2("Precio medio discos o cintas que quiero");
        this.pantallaDescripcion31.setTitulo3("Cantidad de discos o cintas a la venta");
        this.pantallaVenta1.setTitulo1("Precio medio de venta de discos o cintas inicial");
        this.pantallaVenta1.setTitulo2("Precio medio de venta de discos o cintas final");
        this.pantallaVenta1.setTitulo3("Cantidad de discos o cintas a la venta");
        this.tipo=2;
        this.pantallaPresentacion1.setImage(tipo);
        this.guardarDefault(this.articuloDefault);
    }

    /**
     * Cambia el tipo a videojuegos.
     */     
    private void cambioaVideojuegos(){
        this.pantallaDescripcion1.setAutor("Nombre del desarrollador");
        this.pantallaDescripcion1.setTitulo("Titulo del videojuego");
        this.pantallaDescripcion31.setTitulo1("Precio medio videojuegos que tengo");
        this.pantallaDescripcion31.setTitulo2("Precio medio videojuegos que quiero");
        this.pantallaDescripcion31.setTitulo3("Cantidad de videojuegos a la venta");
        this.pantallaVenta1.setTitulo1("Precio medio de venta de videojuegos inicial");
        this.pantallaVenta1.setTitulo2("Precio medio de venta de videojuegos final");
        this.pantallaVenta1.setTitulo3("Cantidad de videojuegos a la venta");
        this.tipo=3;
        this.pantallaPresentacion1.setImage(tipo);        
        this.guardarDefault(this.articuloDefault);
}
 
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource().equals(this.botonInicio.getInicio())){
            botonesPrincipales1.addActionListener(this);
            this.getContentPane().remove(pantallaInicio1);
            this.getContentPane().remove(botonInicio);
            this.getContentPane().add(pantallaSeleccion1, java.awt.BorderLayout.CENTER);
            this.getContentPane().add(botonesPrincipales1, java.awt.BorderLayout.SOUTH);   
            this.revalidate();
            this.repaint();
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && this.pantallaSeleccion1.isShowing() && !this.JTVarbolPrincipal.isShowing()){
            this.getArbol(this.pantallaInicio1.getFuente().getSelectedItem().toString(), this.pantallaSeleccion1.getSeleccion().getSelectedItem().toString());
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getCancelar()) && ((pantallaComparador1.isShowing()) || (pantallaComparador2.isShowing()) || (pantallaComparador3.isShowing()) || (pantallaComparador4.isShowing()))){
            JSDComparados.clear();
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && this.pantallaSeleccionA1.isShowing()){
            this.setDatosDefaultArticulo();
            this.setDatosDefaultBuscador();
            this.seleccionCambio(this.pantallaSeleccionA1.getSeleccion().getSelectedItem().toString());
            this.pantallaPresentacion1.setImage(this.tipo);
            this.JTVarbolPrincipal.getArbol().setSelectionRow(0);
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && this.pantallaSeleccionB1.isShowing()){
            this.setDatosDefaultArticulo();
            this.setDatosDefaultBuscador();
            this.pantallaSeleccionB1.setEstadisticas();
            this.seleccionCambio(this.pantallaSeleccionB1.getSeleccion().getSelectedItem().toString());
            this.pantallaPresentacion1.setImage(this.tipo);
            this.JTVarbolPrincipal.getArbol().setSelectionRow(0);
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && (pantallaDescripcion1.isShowing() || pantallaSeleccionImagen.isShowing() || pantallaDescripcion21.isShowing() || pantallaVenta1.isShowing()) && pantallaDescripcion1.getSave() && !pantallaDescripcion1.isModificar()){
            GuardarDatosArticulo(false);
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && (pantallaDescripcion1.isShowing() || pantallaSeleccionImagen.isShowing() || pantallaDescripcion21.isShowing() || pantallaVenta1.isShowing()) && pantallaDescripcion1.getSave() && pantallaDescripcion1.isModificar()){
            GuardarDatosArticulo(true);
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getCancelar()) && this.JTVarbolPrincipal.isShowing() && !this.pantallaBuscador1.isShowing()){
            this.setDatosDefaultArticulo();
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getCancelar()) && this.pantallaBuscador1.isShowing()) {
            this.setDatosDefaultBuscador();                   
        }
        else if(e.getSource().equals(this.botonesPrincipales1.getAceptar()) && (pantallaBuscador1.isShowing())){
            pantallaBuscador1.limpiarTabla();
            if(pantallaBuscador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Nombre")){
                if(baseDatos.existeCoincidenciaTitulo(pantallaBuscador1.getTexto().getText(), this.tipo)){
                    ArrayList<DatosArticulo> articulos = baseDatos.getListaArticuloTitulo(pantallaBuscador1.getTexto().getText(), this.tipo);        
                    pantallaBuscador1.setTitulo(articulos.get(0).getTitulo());                            
                    if(articulos.get(0).hayImagen())
                        pantallaBuscador1.setImagen(articulos.get(0).getImagen());
                    for(int i=0; i<articulos.size(); i++){
                        pantallaBuscador1.addLinea(articulos.get(i));
                    }
                }
                else
                    JOptionPane.showMessageDialog(null,"No se encuentra ninguna coincidencia con ese título en la BBDD");
            }
            else if(pantallaBuscador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Autor")){
                if(baseDatos.existeCoincidenciaAutor(pantallaBuscador1.getTexto().getText(), this.tipo)){
                    ArrayList<DatosArticulo> articulos = baseDatos.getListaArticuloAutor(pantallaBuscador1.getTexto().getText(), this.tipo);        
                    pantallaBuscador1.setTitulo(articulos.get(0).getTitulo());                            
                    if(articulos.get(0).hayImagen())
                        pantallaBuscador1.setImagen(articulos.get(0).getImagen());                            
                    for(int i=0; i<articulos.size(); i++){
                        pantallaBuscador1.addLinea(articulos.get(i));
                    }
                }
                else
                    JOptionPane.showMessageDialog(null,"No se encuentra ninguna coincidencia con ese autor en la BBDD");
            }
            else if(pantallaBuscador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Formato")){
                if(baseDatos.existeCoincidenciaFormato(pantallaBuscador1.getTexto().getText(), this.tipo)){
                    ArrayList<DatosArticulo> articulos = baseDatos.getListaArticuloFormato(pantallaBuscador1.getTexto().getText(), this.tipo);        
                    pantallaBuscador1.setTitulo(articulos.get(0).getTitulo());                            
                    if(articulos.get(0).hayImagen())
                        pantallaBuscador1.setImagen(articulos.get(0).getImagen());
                    for(int i=0; i<articulos.size(); i++){
                        pantallaBuscador1.addLinea(articulos.get(i));
                    }
                }
                else
                    JOptionPane.showMessageDialog(null,"No se encuentra ninguna coincidencia con ese título en la BBDD");
            }
        }
    }
    
    @Override
    public void stateChanged(ChangeEvent e) {
        DatosArticulo articulo = new DatosArticulo();
        boolean existe = false;
        catalogador.pantallaComparado pantallaComparado1 = new catalogador.pantallaComparado();
        if(e.getSource().equals(pantallaSeleccionA1.getIsEstadisticas())){
            if(pantallaSeleccionA1.getEstadisticas()){
                JSDSeleccion.modificar(pantallaSeleccionB1, "columna", 0);
                pantallaSeleccionB1.setIsEstadisticas();
                pantallaSeleccionB1.setTotal(this.baseDatos.getTotales(tipo));
                pantallaSeleccionB1.setTotalVentas(this.baseDatos.getEnVenta(tipo));
                pantallaSeleccionB1.setTotalGastado(this.baseDatos.getTotalGastado(tipo));
                pantallaSeleccionB1.setTotalRecibido(this.baseDatos.getTotalRecibido(tipo));
            }
        }
        else if(e.getSource().equals(pantallaSeleccionB1.getIsEstadisticas())){
            if(!pantallaSeleccionB1.getEstadisticas()){
                JSDSeleccion.modificar(pantallaSeleccionA1, "columna", 0);
                pantallaSeleccionA1.setNotEstadisticas();
            }
        }        
        else if(e.getSource().equals(pantallaDescripcion1.getIsVenta())){
            if(pantallaDescripcion1.getVenta())
                JTDDatosArticulo2.addExtensibleChild(pantallaVenta1, "Información venta");
            else
                JTDDatosArticulo2.eliminar("Información venta");
        }
        else if(e.getSource().equals(pantallaBuscador1.getIsComparador())){
            if(pantallaBuscador1.getComparador() && !this.comparador) {
                JTVarbolPrincipal.addExtensibleChild(JSDComparador, "Comparador");
                JTDComparador.addChangeListener(this);
                JTVarbolPrincipal.addTreeChangeListener(this);
                this.comparador=true;
            }
            else if(!pantallaBuscador1.getComparador() && this.comparador) {
                JTVarbolPrincipal.eliminar("Comparador");
                JTVarbolPrincipal.addTreeChangeListener(this);
                this.comparador=false;
            }
        }
        else if(e.getSource().equals(pantallaComparador1.getIsAnadir())){
            if(pantallaComparador1.getAnadir()){
                pantallaComparador1.setAnadir(false);
                if(pantallaComparador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Nombre")){
                    if(baseDatos.existeCoincidenciaTitulo(pantallaComparador1.getTexto().getText(), 0)){
                        articulo = baseDatos.getArticuloTitulo(pantallaComparador1.getTexto().getText(), 0);
                        existe=true;
                    }
                }
                else if(pantallaComparador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Autor")){
                    if(baseDatos.existeCoincidenciaAutor(pantallaComparador1.getTexto().getText(), 0)){
                        articulo = baseDatos.getArticuloAutor(pantallaComparador1.getTexto().getText(), 0);
                        existe=true;
                    }
                }
                else if(pantallaComparador1.getElemento().getSelectedItem().toString().equalsIgnoreCase("Formato")){
                    if(baseDatos.existeCoincidenciaFormato(pantallaComparador1.getTexto().getText(), 0)){
                        articulo = baseDatos.getArticuloFormato(pantallaComparador1.getTexto().getText(), 0);
                        existe=true;
                    }
                }
                if(existe){
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setAutor(articulo.getAutor());
                    pantallaComparado1.setEstado(articulo.getEstado());
                    pantallaComparado1.setFormato(articulo.getFormato());
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setPrecioPagado(articulo.getPrecio());
                    pantallaComparado1.setPrecioVenta(articulo.getPrecioVentaFinal());
                    pantallaComparado1.setGanancia(articulo.getPrecioVentaFinal()-baseDatos.getMediaTengo(articulo.getTipo()));
                    JSDComparados.addExtensibleChild(pantallaComparado1, "fila");
                }
                if(articulo.hayImagen()){
                    pantallaComparador1.setImagen(articulo.getImagen());
                    pantallaComparado1.setImagen(articulo.getImagen());
                }
            }
        }
        else if(e.getSource().equals(pantallaComparador2.getIsAnadir())){
            if(pantallaComparador2.getAnadir()){
               pantallaComparador2.setAnadir(false);
               if(pantallaComparador2.getElemento().getSelectedItem().toString().equalsIgnoreCase("Nombre")){
                    if(baseDatos.existeCoincidenciaTitulo(pantallaComparador2.getTexto().getText(), 1)){
                        articulo = baseDatos.getArticuloTitulo(pantallaComparador2.getTexto().getText(), 1);
                        existe=true;
                    }
                }
                if(pantallaComparador2.getElemento().getSelectedItem().toString().equalsIgnoreCase("Autor")){
                    if(baseDatos.existeCoincidenciaAutor(pantallaComparador2.getTexto().getText(), 1)){
                        articulo = baseDatos.getArticuloAutor(pantallaComparador2.getTexto().getText(), 1);
                        existe=true;
                    }
                }
                if(pantallaComparador2.getElemento().getSelectedItem().toString().equalsIgnoreCase("Formato")){
                    if(baseDatos.existeCoincidenciaFormato(pantallaComparador2.getTexto().getText(), 1)){
                        articulo = baseDatos.getArticuloFormato(pantallaComparador2.getTexto().getText(), 1);
                        existe=true;
                    }
                }
                if(existe){
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setAutor(articulo.getAutor());
                    pantallaComparado1.setEstado(articulo.getEstado());
                    pantallaComparado1.setFormato(articulo.getFormato());
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setPrecioPagado(articulo.getPrecio());
                    pantallaComparado1.setPrecioVenta(articulo.getPrecioVentaFinal());
                    pantallaComparado1.setGanancia(articulo.getPrecioVentaFinal()-baseDatos.getMediaTengo(articulo.getTipo()));                    
                    JSDComparados.addExtensibleChild(pantallaComparado1, "fila");
                }
                if(articulo.hayImagen()){
                    pantallaComparador1.setImagen(articulo.getImagen());
                    pantallaComparado1.setImagen(articulo.getImagen());
                }
            }
        }                        
        else if(e.getSource().equals(pantallaComparador3.getIsAnadir())){
            if(pantallaComparador3.getAnadir()){
            pantallaComparador3.setAnadir(false);
               if(pantallaComparador3.getElemento().getSelectedItem().toString().equalsIgnoreCase("Nombre")){
                    if(baseDatos.existeCoincidenciaTitulo(pantallaComparador3.getTexto().getText(), 2)){
                        articulo = baseDatos.getArticuloTitulo(pantallaComparador3.getTexto().getText(), 2);
                        existe=true;
                    }
                }
                if(pantallaComparador3.getElemento().getSelectedItem().toString().equalsIgnoreCase("Autor")){
                    if(baseDatos.existeCoincidenciaAutor(pantallaComparador3.getTexto().getText(), 2)){
                        articulo = baseDatos.getArticuloAutor(pantallaComparador3.getTexto().getText(), 2);
                        existe=true;
                    }
                }
                if(pantallaComparador3.getElemento().getSelectedItem().toString().equalsIgnoreCase("Formato")){
                    if(baseDatos.existeCoincidenciaFormato(pantallaComparador3.getTexto().getText(), 2)){
                        articulo = baseDatos.getArticuloFormato(pantallaComparador3.getTexto().getText(), 2);
                        existe=true;
                    }
                }
                if(existe){
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setAutor(articulo.getAutor());
                    pantallaComparado1.setEstado(articulo.getEstado());
                    pantallaComparado1.setFormato(articulo.getFormato());
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setPrecioPagado(articulo.getPrecio());
                    pantallaComparado1.setPrecioVenta(articulo.getPrecioVentaFinal());
                    pantallaComparado1.setGanancia(articulo.getPrecioVentaFinal()-baseDatos.getMediaTengo(articulo.getTipo()));
                    JSDComparados.addExtensibleChild(pantallaComparado1, "fila");
                }
                if(articulo.hayImagen()){
                    pantallaComparador1.setImagen(articulo.getImagen());
                    pantallaComparado1.setImagen(articulo.getImagen());
                }
            }
        }                       
        else if(e.getSource().equals(pantallaComparador4.getIsAnadir())){
            if(pantallaComparador4.getAnadir()){
                pantallaComparador4.setAnadir(false);
               if(pantallaComparador4.getElemento().getSelectedItem().toString().equalsIgnoreCase("Nombre")){
                    if(baseDatos.existeCoincidenciaTitulo(pantallaComparador4.getTexto().getText(), 3)){
                        articulo = baseDatos.getArticuloTitulo(pantallaComparador4.getTexto().getText(), 3);
                        existe=true;
                    }
                }
                if(pantallaComparador4.getElemento().getSelectedItem().toString().equalsIgnoreCase("Autor")){
                    if(baseDatos.existeCoincidenciaAutor(pantallaComparador4.getTexto().getText(), 3)){
                        articulo = baseDatos.getArticuloAutor(pantallaComparador4.getTexto().getText(), 3);
                        existe=true;
                    }
                }
                if(pantallaComparador3.getElemento().getSelectedItem().toString().equalsIgnoreCase("Formato")){
                    if(baseDatos.existeCoincidenciaFormato(pantallaComparador4.getTexto().getText(), 3)){
                        articulo = baseDatos.getArticuloFormato(pantallaComparador4.getTexto().getText(), 3);
                        existe=true;
                    }
                }
                if(existe){
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setAutor(articulo.getAutor());
                    pantallaComparado1.setEstado(articulo.getEstado());
                    pantallaComparado1.setFormato(articulo.getFormato());
                    pantallaComparado1.setTitulo(articulo.getTitulo());
                    pantallaComparado1.setPrecioPagado(articulo.getPrecio());
                    pantallaComparado1.setPrecioVenta(articulo.getPrecioVentaFinal());
                    pantallaComparado1.setGanancia(articulo.getPrecioVentaFinal()-baseDatos.getMediaTengo(articulo.getTipo()));
                    JSDComparados.addExtensibleChild(pantallaComparado1, "fila");
                }
                if(articulo.hayImagen()){
                    pantallaComparador1.setImagen(articulo.getImagen());
                    pantallaComparado1.setImagen(articulo.getImagen());
                }
            }
        }
        else if(e.getSource().equals(JTDComparador.getTabbedPane())){
            JTabbedPane sourceTabbedPane = (JTabbedPane) e.getSource();
            int i = sourceTabbedPane.getSelectedIndex();
            if(i==0)
                pantallaComparador1.setImage(i);
            else if(i==1)
                pantallaComparador2.setImage(i);
            else if(i==2)
                pantallaComparador3.setImage(i);
            else if(i==3)
                pantallaComparador4.setImage(i);
        }      
    }
    
    @Override
    public void valueChanged(ListSelectionEvent e) {
        ListSelectionModel LSM = (ListSelectionModel) e.getSource();
            int columnas = this.pantallaBuscador1.getTabla().getColumnCount();
            int fila = LSM.getLeadSelectionIndex();
            String[] datosFila = new String[6];
            if(this.pantallaBuscador1.getTabla().getSelectedRow() != -1){
                for(int i = 0; i < columnas; i++){
                    Object oArticulo = this.pantallaBuscador1.getTabla().getValueAt(fila, i);
                    datosFila[i] = oArticulo.toString();
                }
                DatosArticulo articulo=this.baseDatos.getArticuloTitulo(datosFila[0], tipo);
                this.Id = articulo.getId();
                setDatosArticulo(articulo);
                if(articulo.hayImagen())
                    pantallaBuscador1.setImagen(articulo.getImagen());
                else
                    pantallaBuscador1.setImagenDefault();
            }
    }
    
    @Override
    public void valueChanged(TreeSelectionEvent e) {
        CardLayout pantalla = (CardLayout)(JTVarbolPrincipal.getPantalla().getLayout());
        if(this.JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("catalogador"))        
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Presentacion");        
        else if(this.JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("Tipo de coleccion"))
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Tipo de coleccion");
        else if(this.JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("Datos articulo"))
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Datos articulo");
        else if(this.JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("Datos CV"))
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Datos CV");
        else if(JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("Buscador"))
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Buscador");
        else if(JTVarbolPrincipal.getArbol().getLastSelectedPathComponent().toString().equalsIgnoreCase("Comparador"))
            pantalla.show(JTVarbolPrincipal.getPantalla(), "Comparador");
    }
    
    /**
     * Lectura de la BBDD en SQL.
     */ 
    private void leerSQL(){
        conexionSQL conSQL = new conexionSQL();
        Connection con = conSQL.conectarMySQL();
        String query = "SELECT * FROM catalogador.DatosArticuloSQL ORDER BY `titulo`;";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            DatosArticulo articulo = new DatosArticulo();
            while (rs.next())
            {
                articulo.setId(rs.getInt("ID"));
                articulo.setTitulo(rs.getString("titulo"));
                articulo.setAutor(rs.getString("autor"));
                articulo.setFormato(rs.getString("formato"));
                articulo.setExDueño(rs.getString("exDueño"));
                articulo.setFPago(rs.getString("fPago"));
                articulo.setEstado(rs.getString("estado"));
                articulo.setTengo(rs.getBoolean("tengo"));
                articulo.setQuiero(rs.getBoolean("quiero"));
                articulo.setVenta(rs.getBoolean("venta"));
                articulo.setPrecio(rs.getInt("precio"));           
                articulo.setTipo(rs.getInt("tipo"));
                articulo.setFCreacion(rs.getDate("fCreacion"));
                articulo.setFCompra(rs.getDate("fCompra"));
                articulo.setLugarVenta(rs.getString("lugarVenta"));
                articulo.setFPVenta(rs.getDate("fPVenta"));
                articulo.setPrecioVentaInicial(rs.getInt("precioVentaInicial"));
                articulo.setPrecioVentaFinal(rs.getInt("precioVentaFinal"));
                articulo.setTipoVenta(rs.getString("tipoVenta"));
                articulo.setEnlace(rs.getString("enlace"));
                if(!"false".equals(rs.getString("imagen")))
                    articulo.setImagen(rs.getString("imagen"), esSQL);
                baseDatos.addArticulo(articulo,false);
                articulo = new DatosArticulo();
            }
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(Catalogador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
     /**
     * Escritura de la BBDD en SQL.
     */ 
    private void escribirSQL(DatosArticulo articulo, boolean mod){
        conexionSQL conSQL = new conexionSQL();
        Connection con = conSQL.conectarMySQL();
        Format formatter = new SimpleDateFormat("yyyy-MM-dd 00:00:00");
        String update = "";
        if(!mod)
            update = "INSERT INTO `catalogador`.`DatosArticuloSQL` " +
            "(`tipo`," +
            "`titulo`," +
            "`autor`," +
            "`formato`," +
            "`exDueño`," +
            "`fPago`," +
            "`estado`," +
            "`tengo`," +
            "`quiero`," +
            "`venta`," +
            "`comentario`," +
            "`precio`," +
            "`fCreacion`," +
            "`fCompra`," +
            "`lugarVenta`," +
            "`fPVenta`," +
            "`precioVentaInicial`," +
            "`precioVentaFinal`," +
            "`tipoVenta`," +
            "`enlace`," +
            "`imagen`) " +
                "VALUES" +
                    " ('" + articulo.getTipo() + 
                    "', '" + articulo.getTitulo() +
                    "', '" + articulo.getAutor() +
                    "', '" + articulo.getFormato() +
                    "', '" + articulo.getExDueño() +
                    "', '" + articulo.getFPago() +
                    "', '" + articulo.getEstado() +
                    "', '" + articulo.getTengoBin() +
                    "', '" + articulo.getQuieroBin() +
                    "', '" + articulo.getVentaBin() +
                    "', '" + articulo.getComentario() +
                    "', '" + articulo.getPrecio() +               
                    "', '" + formatter.format(articulo.getFCreacion()) +
                    "', '" + formatter.format(articulo.getFCompra()) +
                    "', '" + articulo.getLugarVenta() +
                    "', '" + formatter.format(articulo.getFPVenta()) +
                    "', '" + articulo.getPrecioVentaInicial() +
                    "', '" + articulo.getPrecioVentaFinal() +
                    "', '" + articulo.getTipoVenta() +
                    "', '" + articulo.getEnlace() +
                    "', '" + articulo.getDireccionImagen() + "');";
        else
            update = "UPDATE `catalogador`.`DatosArticuloSQL` SET " +
            "`tipo` = " + "'" + articulo.getTipo() + "'" +
            ", `titulo` = " + "'" + articulo.getTitulo() + "'" +
            ", `autor` = " + "'" + articulo.getAutor() + "'" +
            ", `formato` = " + "'" + articulo.getFormato() + "'" +
            ", `exDueño` = " + "'" + articulo.getExDueño() + "'" +
            ", `fPago` = " + "'" + articulo.getFPago() + "'" +
            ", `estado` = " + "'" + articulo.getEstado() + "'" +
            ", `tengo` = " + "'" + articulo.getTengoBin() + "'" +
            ", `quiero` = " + "'" + articulo.getQuieroBin() + "'" +
            ", `venta` = " + "'" + articulo.getVentaBin() + "'" +
            ", `comentario` = " + "'" + articulo.getComentario() + "'" +
            ", `precio` = " + "'" + articulo.getPrecio() + "'" +
            ", `fCreacion` = " + "'" + formatter.format(articulo.getFCreacion()) + "'" +
            ", `fCompra` = " + "'" + formatter.format(articulo.getFCompra()) + "'" +
            ", `lugarVenta` = " + "'" + articulo.getLugarVenta() + "'" +
            ", `fPVenta` = " + "'" + formatter.format(articulo.getFPVenta()) + "'" +
            ", `precioVentaInicial` = " + "'" + articulo.getPrecioVentaInicial() + "'" +
            ", `precioVentaFinal` = " + "'" + articulo.getPrecioVentaFinal() + "'" +
            ", `tipoVenta` = " + "'" + articulo.getTipoVenta() + "'" +
            ", `enlace` = " + "'" + articulo.getEnlace() + "'" +
            ", `imagen` = " + "'" + articulo.getDireccionImagen() + "'" +
                    " WHERE `ID` = " + "'" + articulo.getId() + "'" + ";";   
        Statement st;
        try {
            st = con.createStatement();
            int rs = st.executeUpdate(update);
            st.close();
        } catch (SQLException ex) {
            System.out.println("No fue posible escribir los datos en la base de datos");
        }       
    }
    
     /**
     * Lectura de los ficheros donde se guarda la BBDD.
     */    
    private void leerFichero() throws IOException{
        String fileName;
        String line;
        for (int tipo=0; tipo<=3; tipo++){
            switch (tipo) {
                case 0:
                    fileName = "./cuadros.txt";
                    break;
                case 1:
                    fileName = "./libros.txt";
                    break;
                case 2:
                    fileName = "./musica.txt";
                    break;
                default:
                    fileName = "./videojuegos.txt";
                    break;
            }
            try {
                FileReader fileReader = new FileReader(fileName);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                DatosArticulo articulo = new DatosArticulo();
                int contador = 0;
                while((line = bufferedReader.readLine()) != null) {
                    if(contador==0)
                        articulo.setTitulo(line);
                    else if(contador==1)
                        articulo.setAutor(line);
                    else if(contador==2)
                        articulo.setFormato(line);
                    else if(contador==3)
                        articulo.setExDueño(line);
                    else if(contador==4)
                        articulo.setFPago(line);
                    else if(contador==5)
                        articulo.setEstado(line);
                    else if(contador==6)
                        articulo.setTengo(Boolean.valueOf(line));
                    else if(contador==7)
                        articulo.setQuiero(Boolean.valueOf(line));
                    else if(contador==8)
                        articulo.setVenta(Boolean.valueOf(line));
                    else if(contador==9)
                        articulo.setPrecio(Integer.parseInt(line));
                    else if(contador==10)
                        articulo.setTipo(Integer.parseInt(line));
                    else if(contador==11)
                        articulo.setFCreacion(Integer.parseInt(line.substring(0, 2)), Integer.parseInt(line.substring(3, 5))-1, Integer.parseInt(line.substring(6, 10)));
                    else if(contador==12)
                        articulo.setFCompra(Integer.parseInt(line.substring(0, 2)), Integer.parseInt(line.substring(3, 5))-1, Integer.parseInt(line.substring(6, 10)));
                    else if(contador==13)
                        articulo.setLugarVenta(line);
                    else if(contador==14)
                        articulo.setFPVenta(Integer.parseInt(line.substring(0, 2)), Integer.parseInt(line.substring(3, 5))-1, Integer.parseInt(line.substring(6, 10)));
                    else if(contador==15)
                        articulo.setPrecioVentaInicial(Integer.parseInt(line));
                    else if(contador==16)
                        articulo.setPrecioVentaFinal(Integer.parseInt(line));
                    else if(contador==17)
                        articulo.setTipoVenta(line);
                    else if(contador==18)
                        articulo.setEnlace(line);
                    else if(contador==19){
                        if(!line.equals("false"))
                            articulo.setImagen(line, esSQL);
                    }
                    contador++;
                    if(contador>19){
                        contador=0;
                        baseDatos.addArticulo(articulo,false);
                        articulo = new DatosArticulo();
                    }
                }   
                bufferedReader.close();         
            }
            catch(FileNotFoundException ex) {
                System.out.println("No se puede abrir el archivo '" + fileName + "'");                
            }   
            catch(IOException ex) {
                System.out.println("Error leyendo archivo '" + fileName + "'"); 
            }
        }
    }

    /**
     * Escritura de los ficheros donde se guarda la BBDD.
     */     
    private void escribirFichero(){
        String fileName;
        ArrayList<DatosArticulo> lista;
        if(this.tipo==0){
            fileName = "./cuadros.txt";
            lista = baseDatos.getListaCuadros();
        }
        else if(this.tipo==1){
            fileName = "./libros.txt";
            lista = baseDatos.getListaLibros();
        }
        else if(this.tipo==2){
            fileName = "./musica.txt";
            lista = baseDatos.getListaMusica();
        }
        else{
            fileName = "./videojuegos.txt";
            lista = baseDatos.getListaVideojuegos();
        }
        try
        {
            FileWriter fileWriter = new FileWriter(fileName);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            for (int i = 0; i < lista.size(); i++){
                bufferedWriter.write(lista.get(i).getTitulo());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getAutor());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getFormato());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getExDueño());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getFPago());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getEstado());
                bufferedWriter.newLine();
                bufferedWriter.write(Boolean.toString(lista.get(i).getTengo()));
                bufferedWriter.newLine();
                bufferedWriter.write(Boolean.toString(lista.get(i).getQuiero()));
                bufferedWriter.newLine();
                bufferedWriter.write(Boolean.toString(lista.get(i).getVenta()));
                bufferedWriter.newLine();
                bufferedWriter.write(Integer.toString(lista.get(i).getPrecio()));
                bufferedWriter.newLine();
                bufferedWriter.write(Integer.toString(lista.get(i).getTipo()));
                bufferedWriter.newLine();
                Format formatter = new SimpleDateFormat("dd-MM-yyyy");
                bufferedWriter.write(formatter.format(lista.get(i).getFCreacion()));
                bufferedWriter.newLine();
                bufferedWriter.write(formatter.format(lista.get(i).getFCompra()));
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getLugarVenta());
                bufferedWriter.newLine();
                bufferedWriter.write(formatter.format(lista.get(i).getFPVenta()));
                bufferedWriter.newLine();
                bufferedWriter.write(Integer.toString(lista.get(i).getPrecioVentaInicial()));
                bufferedWriter.newLine();
                bufferedWriter.write(Integer.toString(lista.get(i).getPrecioVentaFinal()));
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getTipoVenta());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getEnlace());
                bufferedWriter.newLine();
                bufferedWriter.write(lista.get(i).getDireccionImagen());
                bufferedWriter.newLine();
            }
        bufferedWriter.close();         
        }
        catch(FileNotFoundException ex) {
            System.out.println("No se puede abrir el archivo '" + fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println("Error leyendo archivo '" + fileName + "'"); 
        }
    }

}